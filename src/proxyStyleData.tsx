type StyleData = Record<
  string,
  {
    fileNames?: string[];
    stylesLoaded?: boolean;
  }
>;
type StyleDataT = typeof initialState;
const initialState = {
  styleData: null as StyleData | null,
};

type Listener<T> = (value: T) => void;
type ListenersMap = Map<string, Set<Listener<StyleDataT[keyof StyleDataT]>>>;

let state: StyleDataT = {} as StyleDataT; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º state —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let proxyState: StyleDataT | null = null;

const listeners: ListenersMap = new Map();

const initializeState = (initialState: Partial<StyleDataT>) => {
  if (proxyState) return;
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º
  state = { ...state, ...initialState } as StyleDataT;

  proxyState = new Proxy(state, {
    get(target, key: string | symbol) {
      if (typeof key === "string" && key in target) {
        return target[key as keyof StyleDataT];
      }
      return undefined;
    },
    set(target, key: string | symbol, value: StyleDataT[keyof StyleDataT]) {
      if (typeof key === "string") {
        const currentValue = target[key as keyof StyleDataT];
        if (JSON.stringify(currentValue) !== JSON.stringify(value)) {
          target[key as keyof StyleDataT] = value; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
          const keyListeners = listeners.get(key);
          if (keyListeners) {
            keyListeners.forEach((listener) => listener(value));
          }
        }
        return true;
      }
      return false;
    },
  });
};
initializeState(initialState);

const warning = "State is not initialized yet üë∫";

// exported functions
const getState = (): StyleDataT => {
  if (!proxyState) {
    console.warn(warning);
    return {} as StyleDataT;
  }
  return { ...proxyState };
};

const getAllStateValues = (): StyleDataT => {
  if (!proxyState) {
    console.warn(warning);
    return {} as StyleDataT;
  }

  return { ...proxyState };
};

const subscribe = <T,>(key: string, listener: Listener<T>): (() => void) => {
  if (!listeners.has(key)) {
    listeners.set(key, new Set());
  }
  listeners.get(key)?.add(listener as Listener<StyleDataT[keyof StyleDataT]>);

  return () =>
    listeners
      .get(key)
      ?.delete(listener as Listener<StyleDataT[keyof StyleDataT]>);
};

const subscribeToAll = (listener: Listener<StyleDataT>): (() => void) => {
  const unsubscribeFunctions: (() => void)[] = [];

  for (const key in state) {
    unsubscribeFunctions.push(
      subscribe(key, () => {
        listener({ ...proxyState } as StyleDataT); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      })
    );
  }

  return () => {
    unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());
  };
};

const setState = <K extends keyof StyleDataT>(
  key: K,
  value: StyleDataT[K]
): void => {
  if (!proxyState) {
    console.warn(warning);
    return;
  }
  proxyState[key] = value;
};

export {
  getState,
  getAllStateValues,
  subscribe,
  subscribeToAll,
  setState,
  StyleDataT,
};
